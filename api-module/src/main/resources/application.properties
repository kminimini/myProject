spring.application.name = api-module
server.port = 9090

# 정적 리소스에 변화가 있을 때 바로 반영한다.
spring.devtools.livereload.enabled=true

# thymeleaf 참조 경로
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# thymeleaf에 대한 캐시를 남기지 않는다. cache=false 설정(운영시는 true)
spring.thymeleaf.cache = false
# templates 디렉토리에 파일이 있는지 없는지 체크, 없으면 에러를 발생시킨다.
spring.thymeleaf.check-template-location=true

# MySQL 설정
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/multi_module_project?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul
spring.datasource.username = root
spring.datasource.password = 1111

# 콘솔에 SQL 출력 여부
spring.jpa.show-sql = true
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect

# hibernate 설정
spring.jpa.database = mysql
spring.jpa.hibernate.ddl-auto = update
spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy
# 설정을 하지 않으면 CamelCase to UnderScore 가 자동으로 Default 값으로 설정
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# true 일 경우 해당 데이터를 근거로 서버 시작 지점에 DDL 문을 생성해 DB에 적용
spring.jpa.generate-ddl=false
# SQL 문을 로그에 출력
spring.jpa.properties.hibernate.format_sql = true
# LazyInitializationException 에러 방지
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

weather.api.url=http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0/getVilageFcst
weather.api.serviceKey=ilIH9RKW0FA%2Bn8PoaCZErC7%2BGPTuS5qS66c2Jrhv3df%2FAjyfXwcDdSS7JQMweynq1Ywq1TOgTojZa7ypRsTMRg%3D%3D

# 파일 업로드 설정
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# DB 업로드 제한설정
spring.datasource.max-active=50
spring.datasource.max-idle=10
spring.datasource.min-idle=5
spring.datasource.initial-size=5
spring.datasource.max-wait=30000
